const fs = require('fs');

// Syntax Check
function syntaxCheck(jsonString, callback) {
  try {
    const jsonObject = JSON.parse(jsonString);
    console.log('Syntax Check Passed');
    callback(null, true, jsonObject);
  } catch (error) {
    console.log('Syntax Check Failed');
    callback('Invalid JSON syntax', false);
  }
}

// Structure Check
function structureCheck(jsonObject, requiredKeys, callback) {
  const missingKeys = requiredKeys.filter(key => !(key in jsonObject));
  if (missingKeys.length > 0) {
    console.log(`Structure Check Failed. Missing keys: ${missingKeys.join(', ')}`);
    callback(`Missing keys: ${missingKeys.join(', ')}`, false);
  } else {
    console.log('Structure Check Passed');
    callback(null, true);
  }
}

// Type Check
function typeCheck(jsonObject, keyTypes, callback) {
  const typeErrors = [];

  for (const key in keyTypes) {
    if (typeof jsonObject[key] !== keyTypes[key]) {
      typeErrors.push(`Key '${key}' should be of type ${keyTypes[key]}`);
    }
  }

  if (typeErrors.length > 0) {
    console.log(`Type Check Failed. ${typeErrors.join(', ')}`);
    callback(`Type errors: ${typeErrors.join(', ')}`, false);
  } else {
    console.log('Type Check Passed');
    callback(null, true);
  }
}

// Combined JSON Validator
function validateJSON(jsonString, requiredKeys, keyTypes, callback) {
  const checks = [
    (jsonString, cb) => syntaxCheck(jsonString, (error, result, jsonObject) => {
      if (error) {
        cb(error, false);
      } else {
        cb(null, true, jsonObject);
      }
    }),
    (jsonObject, cb) => structureCheck(jsonObject, requiredKeys, cb),
    (jsonObject, cb) => typeCheck(jsonObject, keyTypes, cb)
  ];
  const results = [];
  const errorMessages = [];

  function runCheck(index, jsonObject) {
    if (index === checks.length) {
      const isValid = results.every(result => result === true);
      callback(errorMessages, isValid);
      return;
    }

    checks[index](jsonObject, (error, result, parsedJsonObject) => {
      if (error) errorMessages.push(error);
      results.push(result);
      runCheck(index + 1, parsedJsonObject || jsonObject);
    });
  }

  runCheck(0, jsonString);
}

// Example usage with required keys and key types
const requiredKeys = ['name', 'age', 'email'];
const keyTypes = { name: 'string', age: 'number', email: 'string' };

// Load JSON data from a file (for demonstration purposes)
// const jsonString = fs.readFileSync('data.json', 'utf8');
// validateJSON(jsonString, requiredKeys, keyTypes, (errors, isValid) => {
//   if (isValid) {
//     console.log('JSON is valid');
//   } else {
//     console.log('JSON is invalid', errors);
//   }
// });

module.exports = { validateJSON };
