class InventoryManager {
  constructor() {
    this.inventory = [];
  }

  addItem(name, quantity) {
    const item = this.inventory.find(item => item.name === name);
    if (item) {
      return { status: 'error', message: `Item already exists: ${name}` };
    } else {
      this.inventory.push({ name, quantity });
      return { status: 'success', message: `Item added: ${name} with quantity ${quantity}` };
    }
  }

  listItems() {
    return this.inventory;
  }

  removeItem(name) {
    const index = this.inventory.findIndex(item => item.name === name);
    if (index !== -1) {
      this.inventory.splice(index, 1);
      return { status: 'success', message: `Item removed: ${name}` };
    } else {
      return { status: 'error', message: `Item not found: ${name}` };
    }
  }
}

module.exports = InventoryManager;

// Test script to verify the implementation manually
if (require.main === module) {
  const inventoryManager = new InventoryManager();

  console.log(inventoryManager.addItem('Laptop', 10));
  console.log(inventoryManager.addItem('Smartphone', 15));
  console.log(inventoryManager.addItem('Laptop', 10));
  console.log('Listing all items:');
  console.log(inventoryManager.listItems());
  console.log(inventoryManager.removeItem('Smartphone'));
  console.log(inventoryManager.removeItem('Tablet'));
  console.log('Listing all items:');
  console.log(inventoryManager.listItems());
}
