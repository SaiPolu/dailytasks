const fs = require('fs');

// Syntax Check
function syntaxCheck(jsonString, callback) {
  try {
    const jsonObject = JSON.parse(jsonString);
    console.log('Syntax Check Passed');
    callback(null, true, jsonObject);
  } catch (error) {
    console.log('Syntax Check Failed');
    callback('Invalid JSON syntax', false);
  }
}

// Structure Check
function structureCheck(jsonObject, requiredKeys, callback) {
  const missingKeys = requiredKeys.filter(key => !(key in jsonObject));
  if (missingKeys.length > 0) {
    console.log(`Structure Check Failed. Missing keys: ${missingKeys.join(', ')}`);
    callback(`Missing keys: ${missingKeys.join(', ')}`, false);
  } else {
    console.log('Structure Check Passed');
    callback(null, true);
  }
}

// Type Check
function typeCheck(jsonObject, keyTypes, callback) {
  const typeErrors = [];

  for (const key in keyTypes) {
    if (typeof jsonObject[key] !== keyTypes[key]) {
      typeErrors.push(`Key '${key}' should be of type ${keyTypes[key]}`);
    }
  }

  if (typeErrors.length > 0) {
    console.log(`Type Check Failed. ${typeErrors.join(', ')}`);
    callback(`Type errors: ${typeErrors.join(', ')}`, false);
  } else {
    console.log('Type Check Passed');
    callback(null, true);
  }
}

// Combined JSON Validator
function validateJSON(jsonString, requiredKeys, keyTypes, callback) {
  syntaxCheck(jsonString, (syntaxError, syntaxIsValid, jsonObject) => {
    if (!syntaxIsValid) {
      callback([syntaxError], false);
      return;
    }

    structureCheck(jsonObject, requiredKeys, (structureError, structureIsValid) => {
      if (!structureIsValid) {
        callback([structureError], false);
        return;
      }

      typeCheck(jsonObject, keyTypes, (typeError, typeIsValid) => {
        if (!typeIsValid) {
          callback([typeError], false);
        } else {
          callback([], true);
        }
      });
    });
  });
}

module.exports = { validateJSON };
